{"version":3,"sources":["assets/images/logo.svg","components/button/Button.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","chance","Chance","Math","random","state","firstName","first","lastName","last","country","full","checked","handleChange","bind","assertThisInitialized","setState","_this2","react_default","a","createElement","className","onClick","Promise","all","e","then","alert","react_switch_default","onChange","Component","App","src","logo","alt","components_button_Button","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0SC8CzBC,qBAxCX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAMQ,EAAS,IAAIC,IAAOC,KAAKC,QAFhB,OAGfV,EAAKW,MAAQ,CACTC,UAAWL,EAAOM,QAClBC,SAAUP,EAAOQ,OACjBC,QAAST,EAAOS,QAAQ,CAACC,MAAM,IAC/BC,SAAS,GAEblB,EAAKmB,aAAenB,EAAKmB,aAAaC,KAAlBnB,OAAAoB,EAAA,EAAApB,CAAAD,IATLA,4EAYNkB,GACTf,KAAKmB,SAAS,CAACJ,6CAGV,IAAAK,EAAApB,KACL,OACIqB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,qBAAavB,KAAKQ,MAAMC,UAAxB,IAAoCT,KAAKQ,MAAMG,SAA/C,iBAAuEX,KAAKQ,MAAMK,QAAlF,MACHQ,EAAAC,EAAAC,cAAA,UAAQC,UAAW,SAAUC,QAAS,WAC/BL,EAAKZ,MAAMO,QACVW,QAAAC,IAAA,CAAAlC,EAAAmC,EAAA,GAAAnC,EAAAmC,EAAA,KAAAC,KAAApC,EAAAwB,KAAA,UAA4BY,KAAK,SAAAtC,MAGjCuC,MAAM,iCALd,WASJT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,uCAA+BvB,KAAKQ,MAAMO,QAAU,MAAQ,SAClEM,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQU,SAAUhC,KAAKgB,aAAcD,QAASf,KAAKQ,MAAMO,oBAlC5DkB,qCCYNC,MAXf,WACE,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKY,IAAKC,IAAMZ,UAAU,WAAWa,IAAI,SACzChB,EAAAC,EAAAC,cAACe,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.e9f09b02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport Switch from 'react-switch';\r\nimport Chance from 'chance';\r\nimport './Button.css';\r\n\r\nclass Button extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const chance = new Chance(Math.random);\r\n        this.state = {\r\n            firstName: chance.first(),\r\n            lastName: chance.last(),\r\n            country: chance.country({full: true}),\r\n            checked: true\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(checked) {\r\n        this.setState({checked});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <p><code>Hello {this.state.firstName} {this.state.lastName}, you're from {this.state.country}.</code></p>\r\n                    <button className={\"button\"} onClick={() => {\r\n                        if(this.state.checked) {\r\n                            import('../toast/Toast.js').then(module => {});\r\n                        }\r\n                        else {\r\n                            alert(\"Toast Notifications are Off\");\r\n                        }\r\n                    }}>Toast!</button>\r\n                </div>\r\n                <div>\r\n                    <label>\r\n                        <span><code>Toast Notifications are {this.state.checked ? \"On \" : \"Off \"}</code></span>\r\n                        <Switch onChange={this.handleChange} checked={this.state.checked}/>\r\n                    </label>\r\n                </div>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\nimport Button from '../button/Button';\n// import { Button } from 'reactstrap';\nimport logo from '../../assets/images/logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Button/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}